name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==================== SECURITY & VALIDATION ====================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: java, python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ==================== GATEWAY (JAVA) PIPELINE ====================
  gateway-test:
    name: 🌐 Gateway Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [17, 21]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: huskyapply_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Gateway tests
        working-directory: ./gateway
        run: |
          mvn clean verify -Dspring.profiles.active=test
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/huskyapply_test
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
          RABBITMQ_USERNAME: test
          RABBITMQ_PASSWORD: test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Gateway Tests (Java ${{ matrix.java-version }})
          path: gateway/target/surefire-reports/*.xml
          reporter: java-junit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./gateway/target/site/jacoco/jacoco.xml
          flags: gateway
          name: gateway-coverage

      - name: Archive Gateway artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gateway-artifacts-java-${{ matrix.java-version }}
          path: |
            gateway/target/*.jar
            gateway/target/site/
            gateway/logs/

  # ==================== BRAIN (PYTHON) PIPELINE ====================
  brain-test:
    name: 🧠 Brain Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    services:
      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/uv
            brain/.venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install dependencies
        working-directory: ./brain
        run: |
          uv sync --extra test --extra dev

      - name: Lint with ruff
        working-directory: ./brain
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Type check with mypy
        working-directory: ./brain
        run: |
          uv run mypy . --ignore-missing-imports

      - name: Run Brain tests
        working-directory: ./brain
        run: |
          uv run pytest tests/ -v \
            --cov=. \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=pytest-results.xml
        env:
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
          RABBITMQ_USERNAME: test
          RABBITMQ_PASSWORD: test
          OPENAI_API_KEY: test-key
          ANTHROPIC_API_KEY: test-key

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Brain Tests (Python ${{ matrix.python-version }})
          path: brain/pytest-results.xml
          reporter: java-junit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./brain/coverage.xml
          flags: brain
          name: brain-coverage

      - name: Archive Brain artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: brain-artifacts-python-${{ matrix.python-version }}
          path: |
            brain/htmlcov/
            brain/logs/
            brain/dist/

  # ==================== FRONTEND PIPELINE ====================
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Lint JavaScript
        working-directory: ./frontend
        run: |
          npm run lint
          npm run format:check

      - name: Run Frontend tests
        working-directory: ./frontend
        run: |
          npm run test:unit
          npm run test:integration

      - name: Build for production
        working-directory: ./frontend
        run: npm run build

      - name: Test bundle size
        working-directory: ./frontend
        run: npm run analyze-bundle

      - name: Archive Frontend artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-artifacts-node-${{ matrix.node-version }}
          path: |
            frontend/dist/
            frontend/coverage/

  # ==================== INTEGRATION TESTS ====================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [gateway-test, brain-test, frontend-test]
    if: always() && (needs.gateway-test.result == 'success' && needs.brain-test.result == 'success')

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: huskyapply_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: test
          RABBITMQ_DEFAULT_PASS: test
        ports:
          - 5672:5672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        run: uv python install 3.11

      - name: Start Gateway service
        working-directory: ./gateway
        run: |
          mvn spring-boot:run -Dspring.profiles.active=test &
          echo $! > gateway.pid
        env:
          DATABASE_URL: jdbc:postgresql://localhost:5432/huskyapply_test
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test

      - name: Start Brain service
        working-directory: ./brain
        run: |
          uv sync
          uv run python main.py &
          echo $! > brain.pid
        env:
          RABBITMQ_HOST: localhost
          OPENAI_API_KEY: test-key

      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:8000/healthz; do sleep 5; done'

      - name: Run integration tests
        working-directory: ./brain
        run: |
          uv run pytest tests/test_integration.py -v --junit-xml=integration-results.xml
        env:
          GATEWAY_URL: http://localhost:8080
          BRAIN_URL: http://localhost:8000

      - name: Stop services
        if: always()
        run: |
          [[ -f gateway/gateway.pid ]] && kill $(cat gateway/gateway.pid) || true
          [[ -f brain/brain.pid ]] && kill $(cat brain/brain.pid) || true

      - name: Upload integration test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Integration Tests
          path: brain/integration-results.xml
          reporter: java-junit


  # ==================== PERFORMANCE TESTS ====================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          sudo mv k6 /usr/local/bin

      - name: Run load tests
        run: |
          k6 run scripts/load-test.js --out json=performance-results.json
        env:
          BASE_URL: http://localhost:8080

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # ==================== BUILD & PUBLISH DOCKER IMAGES ====================
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [gateway-test, brain-test]
    if: always() && (needs.gateway-test.result == 'success' && needs.brain-test.result == 'success')

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [gateway, brain]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==================== DEPLOYMENT ====================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.huskyapply.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EKS Staging
        run: |
          aws eks update-kubeconfig --name huskyapply-staging
          ./scripts/deploy.sh staging
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Run smoke tests
        run: |
          ./scripts/smoke-tests.sh staging
        timeout-minutes: 10

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.huskyapply.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EKS Production
        run: |
          aws eks update-kubeconfig --name huskyapply-production
          ./scripts/deploy.sh production
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}

      - name: Run production health checks
        run: |
          ./scripts/health-check.sh --environment=production --timeout=300

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Automated Production Deployment**
            
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref_name }}
            **Author:** ${{ github.actor }}
            
            **Changes:**
            ${{ github.event.head_commit.message }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==================== CLEANUP ====================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up old artifacts
        run: |
          echo "Cleaning up artifacts older than 30 days..."
          # This would typically integrate with your artifact storage cleanup

      - name: Report pipeline metrics
        run: |
          echo "Pipeline completed"
          echo "Total duration: ${{ github.event.workflow_run.conclusion }}"